import asyncio
import logging
import os
import json
from aiohttp import web
import gspread
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
CREDENTIALS_JSON = os.getenv("CREDENTIALS_FILE")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —á–µ—Ä–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π CREDENTIALS_JSON
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

try:
    if not CREDENTIALS_JSON:
        raise Exception("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    credentials_dict = json.loads(CREDENTIALS_JSON)
    creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ ID –∑–∞–∫–∞–∑–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –±–∞–∑–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞
@dp.message()
async def find_order(message: types.Message):
    if not sheet:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets.")
        return

    order_id = message.text.strip()
    try:
        data = sheet.get_all_values()
        headers = data[0]
        rows = data[1:]
        found_orders = [row for row in rows if row[1] == order_id]

        if found_orders:
            response = "\n\n".join(
                f"üìÖ –î–∞—Ç–∞: {order[0]}\nüÜî ID –∑–∞–∫–∞–∑–∞: {order[1]}\nüìú –û–ø–∏—Å–∞–Ω–∏–µ: {order[2]}\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã: {order[3]}\nüî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[4]}\n‚öñÔ∏è –í–µ—Å: {order[5]}\nüöõ ID –≥—Ä—É–∑–∞: {order[6]}"
                for order in found_orders
            )
        else:
            response = "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID."
    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
async def webhook(request):
    update = await request.json()
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("üöÄ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    app = web.Application()
    app.router.add_post("/", webhook)
    await on_startup()
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))  # Railway –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    web.run_app(main(), port=port)
