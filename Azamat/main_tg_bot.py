import asyncio
import logging
import os
import gspread
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("GOOGLE_SHEET_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
CREDENTIALS_FILE = "credentials.json"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
try:
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPES)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    sheet = None  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º sheet –ø—É—Å—Ç—ã–º

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ ID –∑–∞–∫–∞–∑–∞, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –≤ –±–∞–∑–µ.")


@dp.message()
async def find_order(message: Message):
    if not sheet:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Google Sheets.")
        return

    order_id = message.text.strip()

    try:
        data = sheet.get_all_values()
        headers = data[0]
        rows = data[1:]

        found_orders = [row for row in rows if row[1] == order_id]

        if found_orders:
            response = ""
            for order in found_orders:
                response += (
                    f"üìÖ –î–∞—Ç–∞: {order[0]}\n"
                    f"üÜî ID –∑–∞–∫–∞–∑–∞: {order[1]}\n"
                    f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {order[2]}\n"
                    f"üì¶ –¢–æ–≤–∞—Ä—ã: {order[3]}\n"
                    f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[4]}\n"
                    f"‚öñÔ∏è –í–µ—Å: {order[5]}\n"
                    f"üöõ ID –≥—Ä—É–∑–∞: {order[6]}\n\n"
                )
        else:
            response = "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID."

    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

    await message.answer(response)


async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
